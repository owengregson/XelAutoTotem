name: Java CI with Gradle

on:
  push:
    branches:
      - main

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Needed for creating releases

    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'

    - name: Extract current version from gradle.properties
      id: get_version
      run: |
        version=$(grep -oP '(?<=mod_version = ).*' gradle.properties)
        echo "mod_version=$version" >> $GITHUB_ENV

    - name: Get date of last release
      id: get_last_release_date
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Fetch the date of the last release
        last_release_date=$(gh release view --json publishedAt -q '.publishedAt' || echo "none")

        if [ "$last_release_date" = "none" ]; then
          echo "No previous release found. Including all commits."
        else
          echo "Last release date: $last_release_date"
        fi

        echo "last_release_date=$last_release_date" >> $GITHUB_ENV

    - name: Check if version has changed
      id: version_check
      run: |
        current_version="${{ env.mod_version }}"
        last_release_date="${{ env.last_release_date }}"

        if [ "$last_release_date" = "none" ]; then
          echo "No previous release found. Proceeding with build."
          echo "build_required=true" >> $GITHUB_ENV
        elif [ "$current_version" != "$last_release_date" ]; then
          echo "Version has changed from the last release. Proceeding with build."
          echo "build_required=true" >> $GITHUB_ENV
        else
          echo "Version has not changed. Skipping build."
          echo "build_required=false" >> $GITHUB_ENV
        fi

    - name: Build with Gradle
      if: env.build_required == 'true'
      run: ./gradlew build --no-daemon

    - name: Create GitHub Release
      if: env.build_required == 'true' && github.ref == 'refs/heads/main'
      id: create_release
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        if [ "${{ env.last_release_date }}" = "none" ]; then
          # No previous release, so include all commits
          changelog=$(git log --pretty=format:"%h - %s")
        else
          # Include all commits since the last release date (and include the exact timestamp)
          changelog=$(git log --since="${{ env.last_release_date }}" --pretty=format:"%h - %s")
        fi

        tag_name=${{ env.mod_version }}
        release_name="${{ env.mod_version }}"

        # Create the release and capture the upload URL
        upload_url=$(gh release create $tag_name --title "$release_name" --notes "$changelog" --target main --json upload_url -q .upload_url)
        echo "upload_url=$upload_url" >> $GITHUB_ENV

    - name: Upload JAR to Release
      if: env.build_required == 'true' && github.ref == 'refs/heads/main'
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ env.upload_url }}
        asset_path: ./build/libs/XAT-${{ env.mod_version }}.jar  # Only the main JAR file
        asset_name: "XAT-${{ env.mod_version }}.jar"
        asset_content_type: application/java-archive
