name: Java CI with Gradle

on:
  push:
    branches:
      - main

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Needed for creating releases

    steps:
    - name: Check out code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Ensure full history is fetched to capture all commits

    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'

    - name: Extract current version from gradle.properties
      id: get_version
      run: |
        version=$(grep -oP '(?<=mod_version = ).*' gradle.properties)
        echo "mod_version=$version" >> $GITHUB_ENV

    - name: Get date of last release (including pre-releases)
      id: get_last_release_date
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        last_release_date=$(curl -s -H "Authorization: token $GH_TOKEN" \
          https://api.github.com/repos/${{ github.repository }}/releases \
          | jq -r 'map(select(.prerelease or .draft == false)) | sort_by(.created_at) | last | .created_at')

        if [ "$last_release_date" = "null" ] || [ -z "$last_release_date" ]; then
          echo "No previous release found. Including all commits."
          last_release_date="none"
        else
          echo "Last release date: $last_release_date"
        fi

        echo "last_release_date=$last_release_date" >> $GITHUB_ENV

    - name: Check if version has changed
      id: version_check
      run: |
        current_version="${{ env.mod_version }}"
        last_release_date="${{ env.last_release_date }}"

        if [ "$last_release_date" = "none" ]; then
          echo "No previous release found. Proceeding with build."
          echo "build_required=true" >> $GITHUB_ENV
        else
          echo "Version has changed from the last release. Proceeding with build."
          echo "build_required=true" >> $GITHUB_ENV
        fi

    - name: Build with Gradle
      if: env.build_required == 'true'
      run: ./gradlew build --no-daemon

    - name: Create GitHub Release
      if: env.build_required == 'true' && github.ref == 'refs/heads/main'
      id: create_release
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        if [ "${{ env.last_release_date }}" = "none" ]; then
          # No previous release, so include all commits
          changelog=$(git log --pretty=format:"%h - %s")
        else
          # Include all commits since the last release date
          changelog=$(git log --since="${{ env.last_release_date }}" --pretty=format:"%h - %s")
        fi

        echo "Changelog generated:"
        echo "$changelog"

        # Format the changelog with headers
        formatted_changelog=$(printf "## Release v%s\n\n### Changelog:\n%s" "${{ env.mod_version }}" "$(echo "$changelog" | sed 's/^/- /')")

        tag_name=${{ env.mod_version }}
        release_name="${{ env.mod_version }}"

        # Create the release and capture the upload URL
        upload_url=$(gh release create $tag_name --title "$release_name" --notes "$formatted_changelog" --target main -q .upload_url)
        echo "upload_url=$upload_url" >> $GITHUB_ENV

    - name: Upload JAR to Release
      if: env.build_required == 'true' && github.ref == 'refs/heads/main'
      uses: actions/upload-release-asset@v1
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ env.upload_url }}
        asset_path: ./build/libs/XAT-${{ env.mod_version }}.jar  # Only the main JAR file
        asset_name: "XAT-${{ env.mod_version }}.jar"
        asset_content_type: application/java-archive
